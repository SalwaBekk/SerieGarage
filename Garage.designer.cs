#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SerieGarage
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Garage")]
	public partial class GarageDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Définitions de méthodes d'extensibilité
    partial void OnCreated();
    partial void InsertGarage(Garage instance);
    partial void UpdateGarage(Garage instance);
    partial void DeleteGarage(Garage instance);
    partial void InsertVoiture(Voiture instance);
    partial void UpdateVoiture(Voiture instance);
    partial void DeleteVoiture(Voiture instance);
    partial void InsertPiece(Piece instance);
    partial void UpdatePiece(Piece instance);
    partial void DeletePiece(Piece instance);
    partial void InsertReparation(Reparation instance);
    partial void UpdateReparation(Reparation instance);
    partial void DeleteReparation(Reparation instance);
    partial void InsertUtilise(Utilise instance);
    partial void UpdateUtilise(Utilise instance);
    partial void DeleteUtilise(Utilise instance);
    #endregion
		
		public GarageDataContext() : 
				base(global::SerieGarage.Properties.Settings.Default.GarageConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public GarageDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GarageDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GarageDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GarageDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Garage> Garage
		{
			get
			{
				return this.GetTable<Garage>();
			}
		}
		
		public System.Data.Linq.Table<Voiture> Voiture
		{
			get
			{
				return this.GetTable<Voiture>();
			}
		}
		
		public System.Data.Linq.Table<Piece> Piece
		{
			get
			{
				return this.GetTable<Piece>();
			}
		}
		
		public System.Data.Linq.Table<Reparation> Reparation
		{
			get
			{
				return this.GetTable<Reparation>();
			}
		}
		
		public System.Data.Linq.Table<Utilise> Utilise
		{
			get
			{
				return this.GetTable<Utilise>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Garage")]
	public partial class Garage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _idG;
		
		private string _nomG;
		
		private System.Nullable<long> _idR;
		
		private EntityRef<Reparation> _Reparation;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidGChanging(long value);
    partial void OnidGChanged();
    partial void OnnomGChanging(string value);
    partial void OnnomGChanged();
    partial void OnidRChanging(System.Nullable<long> value);
    partial void OnidRChanged();
    #endregion
		
		public Garage()
		{
			this._Reparation = default(EntityRef<Reparation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idG", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long idG
		{
			get
			{
				return this._idG;
			}
			set
			{
				if ((this._idG != value))
				{
					this.OnidGChanging(value);
					this.SendPropertyChanging();
					this._idG = value;
					this.SendPropertyChanged("idG");
					this.OnidGChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nomG", DbType="VarChar(30)")]
		public string nomG
		{
			get
			{
				return this._nomG;
			}
			set
			{
				if ((this._nomG != value))
				{
					this.OnnomGChanging(value);
					this.SendPropertyChanging();
					this._nomG = value;
					this.SendPropertyChanged("nomG");
					this.OnnomGChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idR", DbType="BigInt")]
		public System.Nullable<long> idR
		{
			get
			{
				return this._idR;
			}
			set
			{
				if ((this._idR != value))
				{
					if (this._Reparation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidRChanging(value);
					this.SendPropertyChanging();
					this._idR = value;
					this.SendPropertyChanged("idR");
					this.OnidRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reparation_Garage", Storage="_Reparation", ThisKey="idR", OtherKey="idR", IsForeignKey=true)]
		public Reparation Reparation
		{
			get
			{
				return this._Reparation.Entity;
			}
			set
			{
				Reparation previousValue = this._Reparation.Entity;
				if (((previousValue != value) 
							|| (this._Reparation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Reparation.Entity = null;
						previousValue.Garage.Remove(this);
					}
					this._Reparation.Entity = value;
					if ((value != null))
					{
						value.Garage.Add(this);
						this._idR = value.idR;
					}
					else
					{
						this._idR = default(Nullable<long>);
					}
					this.SendPropertyChanged("Reparation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Voiture")]
	public partial class Voiture : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Immat;
		
		private string _MarqueV;
		
		private string _ModeleV;
		
		private string _TelProprietaire;
		
		private EntitySet<Reparation> _Reparation;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnImmatChanging(string value);
    partial void OnImmatChanged();
    partial void OnMarqueVChanging(string value);
    partial void OnMarqueVChanged();
    partial void OnModeleVChanging(string value);
    partial void OnModeleVChanged();
    partial void OnTelProprietaireChanging(string value);
    partial void OnTelProprietaireChanged();
    #endregion
		
		public Voiture()
		{
			this._Reparation = new EntitySet<Reparation>(new Action<Reparation>(this.attach_Reparation), new Action<Reparation>(this.detach_Reparation));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Immat", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Immat
		{
			get
			{
				return this._Immat;
			}
			set
			{
				if ((this._Immat != value))
				{
					this.OnImmatChanging(value);
					this.SendPropertyChanging();
					this._Immat = value;
					this.SendPropertyChanged("Immat");
					this.OnImmatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarqueV", DbType="VarChar(30)")]
		public string MarqueV
		{
			get
			{
				return this._MarqueV;
			}
			set
			{
				if ((this._MarqueV != value))
				{
					this.OnMarqueVChanging(value);
					this.SendPropertyChanging();
					this._MarqueV = value;
					this.SendPropertyChanged("MarqueV");
					this.OnMarqueVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModeleV", DbType="VarChar(30)")]
		public string ModeleV
		{
			get
			{
				return this._ModeleV;
			}
			set
			{
				if ((this._ModeleV != value))
				{
					this.OnModeleVChanging(value);
					this.SendPropertyChanging();
					this._ModeleV = value;
					this.SendPropertyChanged("ModeleV");
					this.OnModeleVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TelProprietaire", DbType="VarChar(30)")]
		public string TelProprietaire
		{
			get
			{
				return this._TelProprietaire;
			}
			set
			{
				if ((this._TelProprietaire != value))
				{
					this.OnTelProprietaireChanging(value);
					this.SendPropertyChanging();
					this._TelProprietaire = value;
					this.SendPropertyChanged("TelProprietaire");
					this.OnTelProprietaireChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Voiture_Reparation", Storage="_Reparation", ThisKey="Immat", OtherKey="MatV")]
		public EntitySet<Reparation> Reparation
		{
			get
			{
				return this._Reparation;
			}
			set
			{
				this._Reparation.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Reparation(Reparation entity)
		{
			this.SendPropertyChanging();
			entity.Voiture = this;
		}
		
		private void detach_Reparation(Reparation entity)
		{
			this.SendPropertyChanging();
			entity.Voiture = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Piece")]
	public partial class Piece : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _idP;
		
		private string _NomP;
		
		private System.Nullable<decimal> _PrixP;
		
		private EntitySet<Utilise> _Utilise;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidPChanging(long value);
    partial void OnidPChanged();
    partial void OnNomPChanging(string value);
    partial void OnNomPChanged();
    partial void OnPrixPChanging(System.Nullable<decimal> value);
    partial void OnPrixPChanged();
    #endregion
		
		public Piece()
		{
			this._Utilise = new EntitySet<Utilise>(new Action<Utilise>(this.attach_Utilise), new Action<Utilise>(this.detach_Utilise));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idP", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long idP
		{
			get
			{
				return this._idP;
			}
			set
			{
				if ((this._idP != value))
				{
					this.OnidPChanging(value);
					this.SendPropertyChanging();
					this._idP = value;
					this.SendPropertyChanged("idP");
					this.OnidPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NomP", DbType="VarChar(100)")]
		public string NomP
		{
			get
			{
				return this._NomP;
			}
			set
			{
				if ((this._NomP != value))
				{
					this.OnNomPChanging(value);
					this.SendPropertyChanging();
					this._NomP = value;
					this.SendPropertyChanged("NomP");
					this.OnNomPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrixP", DbType="Money")]
		public System.Nullable<decimal> PrixP
		{
			get
			{
				return this._PrixP;
			}
			set
			{
				if ((this._PrixP != value))
				{
					this.OnPrixPChanging(value);
					this.SendPropertyChanging();
					this._PrixP = value;
					this.SendPropertyChanged("PrixP");
					this.OnPrixPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Piece_Utilise", Storage="_Utilise", ThisKey="idP", OtherKey="idP")]
		public EntitySet<Utilise> Utilise
		{
			get
			{
				return this._Utilise;
			}
			set
			{
				this._Utilise.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Utilise(Utilise entity)
		{
			this.SendPropertyChanging();
			entity.Piece = this;
		}
		
		private void detach_Utilise(Utilise entity)
		{
			this.SendPropertyChanging();
			entity.Piece = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Reparation")]
	public partial class Reparation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _idR;
		
		private System.Nullable<System.DateTime> _DateR;
		
		private System.Nullable<decimal> _PrixR;
		
		private string _MatV;
		
		private EntitySet<Garage> _Garage;
		
		private EntitySet<Utilise> _Utilise;
		
		private EntityRef<Voiture> _Voiture;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidRChanging(long value);
    partial void OnidRChanged();
    partial void OnDateRChanging(System.Nullable<System.DateTime> value);
    partial void OnDateRChanged();
    partial void OnPrixRChanging(System.Nullable<decimal> value);
    partial void OnPrixRChanged();
    partial void OnMatVChanging(string value);
    partial void OnMatVChanged();
    #endregion
		
		public Reparation()
		{
			this._Garage = new EntitySet<Garage>(new Action<Garage>(this.attach_Garage), new Action<Garage>(this.detach_Garage));
			this._Utilise = new EntitySet<Utilise>(new Action<Utilise>(this.attach_Utilise), new Action<Utilise>(this.detach_Utilise));
			this._Voiture = default(EntityRef<Voiture>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idR", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long idR
		{
			get
			{
				return this._idR;
			}
			set
			{
				if ((this._idR != value))
				{
					this.OnidRChanging(value);
					this.SendPropertyChanging();
					this._idR = value;
					this.SendPropertyChanged("idR");
					this.OnidRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateR", DbType="Date")]
		public System.Nullable<System.DateTime> DateR
		{
			get
			{
				return this._DateR;
			}
			set
			{
				if ((this._DateR != value))
				{
					this.OnDateRChanging(value);
					this.SendPropertyChanging();
					this._DateR = value;
					this.SendPropertyChanged("DateR");
					this.OnDateRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrixR", DbType="Money")]
		public System.Nullable<decimal> PrixR
		{
			get
			{
				return this._PrixR;
			}
			set
			{
				if ((this._PrixR != value))
				{
					this.OnPrixRChanging(value);
					this.SendPropertyChanging();
					this._PrixR = value;
					this.SendPropertyChanged("PrixR");
					this.OnPrixRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatV", DbType="VarChar(20)")]
		public string MatV
		{
			get
			{
				return this._MatV;
			}
			set
			{
				if ((this._MatV != value))
				{
					if (this._Voiture.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatVChanging(value);
					this.SendPropertyChanging();
					this._MatV = value;
					this.SendPropertyChanged("MatV");
					this.OnMatVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reparation_Garage", Storage="_Garage", ThisKey="idR", OtherKey="idR")]
		public EntitySet<Garage> Garage
		{
			get
			{
				return this._Garage;
			}
			set
			{
				this._Garage.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reparation_Utilise", Storage="_Utilise", ThisKey="idR", OtherKey="idR")]
		public EntitySet<Utilise> Utilise
		{
			get
			{
				return this._Utilise;
			}
			set
			{
				this._Utilise.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Voiture_Reparation", Storage="_Voiture", ThisKey="MatV", OtherKey="Immat", IsForeignKey=true)]
		public Voiture Voiture
		{
			get
			{
				return this._Voiture.Entity;
			}
			set
			{
				Voiture previousValue = this._Voiture.Entity;
				if (((previousValue != value) 
							|| (this._Voiture.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Voiture.Entity = null;
						previousValue.Reparation.Remove(this);
					}
					this._Voiture.Entity = value;
					if ((value != null))
					{
						value.Reparation.Add(this);
						this._MatV = value.Immat;
					}
					else
					{
						this._MatV = default(string);
					}
					this.SendPropertyChanged("Voiture");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Garage(Garage entity)
		{
			this.SendPropertyChanging();
			entity.Reparation = this;
		}
		
		private void detach_Garage(Garage entity)
		{
			this.SendPropertyChanging();
			entity.Reparation = null;
		}
		
		private void attach_Utilise(Utilise entity)
		{
			this.SendPropertyChanging();
			entity.Reparation = this;
		}
		
		private void detach_Utilise(Utilise entity)
		{
			this.SendPropertyChanging();
			entity.Reparation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Utilise")]
	public partial class Utilise : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _idU;
		
		private System.Nullable<int> _Qte;
		
		private System.Nullable<long> _idR;
		
		private System.Nullable<long> _idP;
		
		private EntityRef<Piece> _Piece;
		
		private EntityRef<Reparation> _Reparation;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidUChanging(long value);
    partial void OnidUChanged();
    partial void OnQteChanging(System.Nullable<int> value);
    partial void OnQteChanged();
    partial void OnidRChanging(System.Nullable<long> value);
    partial void OnidRChanged();
    partial void OnidPChanging(System.Nullable<long> value);
    partial void OnidPChanged();
    #endregion
		
		public Utilise()
		{
			this._Piece = default(EntityRef<Piece>);
			this._Reparation = default(EntityRef<Reparation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idU", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long idU
		{
			get
			{
				return this._idU;
			}
			set
			{
				if ((this._idU != value))
				{
					this.OnidUChanging(value);
					this.SendPropertyChanging();
					this._idU = value;
					this.SendPropertyChanged("idU");
					this.OnidUChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Qte", DbType="Int")]
		public System.Nullable<int> Qte
		{
			get
			{
				return this._Qte;
			}
			set
			{
				if ((this._Qte != value))
				{
					this.OnQteChanging(value);
					this.SendPropertyChanging();
					this._Qte = value;
					this.SendPropertyChanged("Qte");
					this.OnQteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idR", DbType="BigInt")]
		public System.Nullable<long> idR
		{
			get
			{
				return this._idR;
			}
			set
			{
				if ((this._idR != value))
				{
					if (this._Reparation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidRChanging(value);
					this.SendPropertyChanging();
					this._idR = value;
					this.SendPropertyChanged("idR");
					this.OnidRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idP", DbType="BigInt")]
		public System.Nullable<long> idP
		{
			get
			{
				return this._idP;
			}
			set
			{
				if ((this._idP != value))
				{
					if (this._Piece.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidPChanging(value);
					this.SendPropertyChanging();
					this._idP = value;
					this.SendPropertyChanged("idP");
					this.OnidPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Piece_Utilise", Storage="_Piece", ThisKey="idP", OtherKey="idP", IsForeignKey=true)]
		public Piece Piece
		{
			get
			{
				return this._Piece.Entity;
			}
			set
			{
				Piece previousValue = this._Piece.Entity;
				if (((previousValue != value) 
							|| (this._Piece.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Piece.Entity = null;
						previousValue.Utilise.Remove(this);
					}
					this._Piece.Entity = value;
					if ((value != null))
					{
						value.Utilise.Add(this);
						this._idP = value.idP;
					}
					else
					{
						this._idP = default(Nullable<long>);
					}
					this.SendPropertyChanged("Piece");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reparation_Utilise", Storage="_Reparation", ThisKey="idR", OtherKey="idR", IsForeignKey=true)]
		public Reparation Reparation
		{
			get
			{
				return this._Reparation.Entity;
			}
			set
			{
				Reparation previousValue = this._Reparation.Entity;
				if (((previousValue != value) 
							|| (this._Reparation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Reparation.Entity = null;
						previousValue.Utilise.Remove(this);
					}
					this._Reparation.Entity = value;
					if ((value != null))
					{
						value.Utilise.Add(this);
						this._idR = value.idR;
					}
					else
					{
						this._idR = default(Nullable<long>);
					}
					this.SendPropertyChanged("Reparation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
